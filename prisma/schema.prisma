// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum State {
  APPROVED
  PENDING
  DECLINED
}

model User {
  id           String        @id @default(uuid())
  username     String        @unique
  email        String        @unique
  passwordHash String        @map("password_hash")
  state        State         @default(PENDING)
  refreshToken RefreshToken?
  roles        UserRole[]
  events       Event[]
  tickets      Ticket[]
  reviews      Review[]

  @@map("users")
}

model Event {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  organizerId  String   @map("organizer_id")
  name         String
  category     Category @relation(fields: [categoryName], references: [name])
  categoryName String   @map("category_name")
  description  String?
  startTime    DateTime @map("start_time")
  endTime      DateTime @map("end_time")
  location     String?
  tickets      Ticket[]
  reviews      Review[]

  @@map("events")
}

model Category {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  events      Event[]

  @@map("categories")
}

model Ticket {
  id      String   @id @default(uuid())
  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String   @map("event_id")
  label   String?
  amount  Int
  price   Decimal?
  users   User[]

  @@map("tickets")
}

model Review {
  id        String   @id @default(uuid())
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String   @map("event_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  rating    Decimal
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")

  @@map("reviews")
}

model RefreshToken {
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique @map("user_id")
  token     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("refresh_token")
}

enum TokenAssignment {
  VERIFICATION
  RESETTING
}

model EmailToken {
  token           String          @id @default(uuid())
  email           String
  tokenAssignment TokenAssignment @map("token_assignment")
  createdAt       DateTime        @default(now()) @map("created_at")

  @@map("email_tokens")
}

enum RoleName {
  USER
  ORGANIZER
  MODERATOR
  ADMIN
}

model Role {
  id          String       @id @default(uuid())
  name        RoleName     @unique
  permissions Permission[]
  users       UserRole[]
  createdAt   DateTime?    @default(now()) @map("created_at")
  updatedAt   DateTime?    @default(now()) @updatedAt @map("updated_at")

  @@map("roles")
}

model UserRole {
  user      User      @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId    String    @map("user_id")
  role      Role      @relation(references: [id], fields: [roleId], onDelete: Cascade)
  roleId    String    @map("role_id")
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at")

  @@id([userId, roleId])
  @@map("user_roles")
}

model Permission {
  id        String    @id @default(uuid())
  action    String
  role      Role      @relation(references: [id], fields: [roleId], onDelete: Cascade)
  roleId    String    @map("role_id")
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at")

  @@map("permissions")
}
